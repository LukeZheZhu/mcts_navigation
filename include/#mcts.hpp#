#ifndef MCTS_HPP
#define MCTS_HPP

#include <iostream>

#inlcude "mcts_defs.hpp"

namespace mcts {
    class CMap {
    private:
        std::vector<std::vector<grid*> >
                    m_map(MAP_HEIGHT, std::vector<grid*>(MAP_WIDTH));

        struct SCoordinate m_start;
        struct SCoordinate m_terminal;

    public:
        CMap();

        bool setStart(int x, int y);
        bool setTerminel(int x, int y);
        struct SPosition getStart();
        struct SPosition getTerminal();

        bool isLegel(int x, int y);
        bool isEnd();
    };

    class CMcts {
        int m_index;
        std::vector<struct SCoordinate> > m_move(8);

        CMcts();
        CMcts(CNode* node);

        CNode* treePolicy(CNode* &node);
        int defaultPolicy(CNode* node);

        CNode* nodeExpand(CNode* &node);
        CNode* bestChild();
        void backUp(CNode* node, float reward);
    };
} //namespace mcts

#endif //MCTS_HPP
